###
# #%L
# ff4j-store-neo4j
# %%
# Copyright (C) 2013 - 2015 Ff4J
# %%
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# #L%

# Les properties devraient avoir un identifiant unique ? Non il sont reconnus de part leur relationship
# Flippingstrategu est aussi reconnnu par leur realtion

// Detele ALL
MATCH (n) DETACH
DELETE n;

// Create indexes in order to add relationshop in 2 times
CREATE INDEX ON :FF4J_FEATURE(uid);
CREATE INDEX ON :FF4J_FEATURE_GROUP(name);

// Associe PPINT et F
MATCH (f:FF4J_FEATURE {uid:'first'}), (p:FF4J_PROPERTY {name:'ppint'})
CREATE (p)-[:PROPERTY_OF]->(f);


MATCH  (f:FF4J_FEATURE {uid:'first'})
CREATE (fs:FF4J_FLIPPING_STRATEGY { type:'org.ff4j.strategy.el.ExpressionFlipStrategy', initParams: [ 'expression=third|second' ]})-[:STRATEGY_OF]->(f);


// Create Feature AwesomeFeature
CREATE (AwesomeFeature:FF4J_FEATURE { uid:'AwesomeFeature', enable:true, description:'some desc' }),
       (first:FF4J_FEATURE { uid:'first',  enable:true, description:'first',  roles:['USER'] }),
 	   (ppint:FF4J_FEATURE_PROPERTY { name:'ppint', type:'org.ff4j.property.PropertyInt', value:'12' }),
	   (ppdouble:FF4J_FEATURE_PROPERTY { name:'ppdouble', value:'12.5' }),
	   (ppboolean:FF4J_FEATURE_PROPERTY { name:'ppboolean', value:'true' }),
	   (ppstring:FF4J_FEATURE_PROPERTY { name:'ppstring', value:'hello' }),
	   (ppListInt:FF4J_FEATURE_PROPERTY { name:'ppListInt', value:'12,13,14' }),
	   (myLogLevel:FF4J_FEATURE_PROPERTY { name:'myLogLevel', value:'DEBUG', type:'org.ff4j.property.PropertyLogLevel' }),
	   (digitValue:FF4J_FEATURE_PROPERTY { name:'digitValue', value:'1', type:'org.ff4j.property.PropertyInt', fixedValues: ['0','1','2','3'] }),
	   (regionIdentifier:FF4J_FEATURE_PROPERTY { name:'regionIdentifier', value:'AMER', fixedValues: ['AMER','SSSS','EAST','EAST'] }),
	   ppdouble-[:PROPERTY_OF]->first,
	   ppboolean-[:PROPERTY_OF]->first,
	   ppstring-[:PROPERTY_OF]->first,
	   ppListInt-[:PROPERTY_OF]->first,
	   myLogLevel-[:PROPERTY_OF]->first,
	   digitValue-[:PROPERTY_OF]->first,
	   regionIdentifier-[:PROPERTY_OF]->first, 
	   (GRP0:FF4J_FEATURE_GROUP { name:'GRP0' }),
	   (second:FF4J_FEATURE { uid:'second', enable:false, description:'second', roles:['USER'] }),
	   (second)-[:MEMBER_OF]->(GRP0),   
	   (GRP1:FF4J_FEATURE_GROUP { name:'GRP1' }),
	   (third:FF4J_FEATURE { uid:'third', enable:false, description:'third', roles:['ADMINISTRATOR', 'BETA-TESTER'] }),
	   (third)-[:MEMBER_OF]->(GRP1),  
	   (forth:FF4J_FEATURE { uid:'forth', enable:true, description:'forth', roles:['ADMINISTRATOR', 'BETA-TESTER'] }),
	   (stratforth:FF4J_FLIPPING_STRATEGY { type:'org.ff4j.strategy.el.ExpressionFlipStrategy', initParams: [ 'expression=third|second' ]}),
	   (stratforth)-[:STRATEGY_OF]->forth,
	   (stratforth)-[:STRATEGY_OF]->first,
	   (forth)-[:MEMBER_OF]->(GRP1), 
	   (a:FF4J_PROPERTY { name:'a', value:'AMER',fixedValues: ['AMER','EAST','EAST','EAST'] }),
	   (b:FF4J_PROPERTY { name:'b', value:'12' }),
	   (c:FF4J_PROPERTY { name:'c', value:'12.5' }),
	   (d:FF4J_PROPERTY { name:'d', value:'true' }),
	   (e:FF4J_PROPERTY { name:'e', value:'hello' }),
	   (f:FF4J_PROPERTY { name:'f', value:'12,13,14' }),
	   (g:FF4J_PROPERTY { name:'g', value:'DEBUG', type:'org.ff4j.property.PropertyLogLevel'  });

// Read All nodes of the Graph
MATCH (n) RETURN n;

// return All features
MATCH (f:FF4J_FEATURE) RETURN f;

// return all groups
MATCH (g:FF4J_FEATURE_GROUP) RETURN g;

// return all property
MATCH (p:FF4J_PROPERTY) RETURN p;

// Test existence
MATCH (f:FF4J_FEATURE { uid: 'first' }) RETURN count(*);

// Read Feature By ID
MATCH (f:FF4J_FEATURE { uid: 'first' }) RETURN f.enable;
MATCH (f:FF4J_FEATURE { uid: 'first' }) RETURN f;

// ReadAll Properties of first
MATCH (f:FF4J_FEATURE { uid: 'first' })--(p:FF4J_PROPERTY) RETURN f, p;

// Read Strategy of first
MATCH (f:FF4J_FEATURE { uid: 'first' })--(s:FF4J_FLIPPING_STRATEGY) RETURN f, s;

// All element related to first by ID
MATCH (f:FF4J_FEATURE { uid: 'first' })--(all) RETURN f, all;

// Toggle Off
MATCH (f:FF4J_FEATURE { uid: 'first' }) SET f.enable =false RETURN f.enable;
// Toggle On
MATCH (f:FF4J_FEATURE { uid: 'first' }) SET f.enable =false RETURN f.enable;

// Create Flipping Strategy on First
CREATE (flippinstrategyxxx:FF4J_FLIPPING_STRATEGY);
MATCH (f:FF4J_FEATURE {uid:'first'}),  (flippinstrategyxxx:FF4J_FLIPPING_STRATEGY {})
CREATE flippinstrategyxxx-[:STRATEGY_OF]->f;

// Mise à jour de la flipping strategy
MATCH (f:FF4J_FEATURE { uid: 'forth' })--(s:FF4J_FLIPPING_STRATEGY) 
SET s.initParams='HELLO'
RETURN s;

MATCH (f:FF4J_FEATURE { uid: 'first' })--(p:FF4J_PROPERTY)
RETURN p;

// Group d'une Feature
MATCH (f:FF4J_FEATURE{ uid: 'forth' })--(g:FF4J_FEATURE_GROUP) return g.name as GROUPNAME;

// Trouve toute les features d'un group
MATCH (f:FF4J_FEATURE) WHERE (f)-[:MEMBER_OF]-( { name:'GRP1' }) RETURN COUNT(*) AS NB;
MATCH (f:FF4J_FEATURE) WHERE (f)-[:MEMBER_OF]-( { name:'GRP1' }) RETURN f.uid;

// Ajouter un feature à un group
MATCH (f:FF4J_FEATURE { uid: 'first' }), (g:FF4J_FEATURE_GROUP { name:'GRP0' })
CREATE (f)-[:MEMBER_OF]->(g);

// Supprimer d'un groupe
MATCH (f:f:FF4J_FEATURE { uid: 'first' })-[a:MEMBER_OF]->() DELETE a;

// Retrouver la relation MEMBER_OF d'un feature pour la supprimer
MATCH (f:FF4J_FEATURE { uid: 'first' })-[a:MEMBER_OF]->() RETURN a;
MATCH (f:FF4J_FEATURE { uid: 'first' })-[a:MEMBER_OF]->() DELETE a;


MATCH (f:FF4J_FEATURE { uid: 'first' })-[a:MEMBER_OF]->(g:FF4J_FEATURE_GROUP { name:'GRP0' }) RETURN a;


/// ----------------- TESTS ---------------------------------------



WHERE						:	Provides criteria for filtering pattern matching results.
CREATE and CREATE UNIQUE	:	Create nodes and relationships.
DELETE						: 	Removes nodes, relationships, and properties.
SET	Sets property values.
FOREACH
Performs an updating action for each element in a list.
UNION
Merges results from two or more queries (introduced in Neo4j 2.0).
WITH
Chains subsequent query parts and forward results from one to the next. Similar
to piping commands in Unix.
RETURN DISTINCT asset


